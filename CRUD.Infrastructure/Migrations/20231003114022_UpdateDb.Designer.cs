// <auto-generated />
using System;
using CRUD.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUD.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231003114022_UpdateDb")]
    partial class UpdateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUD.Core.Domain.Entities.Airplane", b =>
                {
                    b.Property<Guid>("AirplaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Manufacturer");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Production")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Type");

                    b.HasKey("AirplaneId");

                    b.ToTable("Airplanes", (string)null);

                    b.HasData(
                        new
                        {
                            AirplaneId = new Guid("69982775-c4b0-4da2-8cc7-b7533a6b67d0"),
                            Manufacturer = "Boeing",
                            Price = 15000000.0,
                            Production = new DateTime(2023, 10, 3, 13, 40, 21, 906, DateTimeKind.Local).AddTicks(8663),
                            Type = "737-700"
                        });
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Postal Code");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            CityId = new Guid("02b6597a-33f1-48e2-8d4e-3427e1d6134e"),
                            Name = "Budapest",
                            Population = 300000,
                            PostalCode = "1058"
                        });
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = new Guid("fc8d48a1-a7fd-4dc4-88c0-fa512ff879ff"),
                            Name = "Hungary"
                        },
                        new
                        {
                            CountryId = new Guid("0919f2b8-96c4-4284-bf69-02881447abe1"),
                            Name = "Spain"
                        },
                        new
                        {
                            CountryId = new Guid("ea5da711-9627-4191-bf9c-785eda9d7c6f"),
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date of birth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("PersonalID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PersonId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PersonalID")
                        .IsUnique()
                        .HasFilter("[PersonalID] IS NOT NULL");

                    b.ToTable("Persons", (string)null);

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("fc8d48a1-a7fd-4dc4-88c0-fa512ff879ff"),
                            Address = "Test address",
                            CountryId = new Guid("fc8d48a1-a7fd-4dc4-88c0-fa512ff879ff"),
                            Name = "Test Jacob",
                            PersonalID = "123456"
                        });
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.City", b =>
                {
                    b.HasOne("CRUD.Core.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.Person", b =>
                {
                    b.HasOne("CRUD.Core.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CRUD.Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
